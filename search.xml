<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[正则表达式]]></title>
    <url>%2F2018%2F06%2F23%2Freg%2F</url>
    <content type="text"><![CDATA[正则表达式 /正则表达式主体/修饰符(可选) 转义字符： \s : 空格 \S : 非空格 \d : 数字 \D : 非数字 \w : 字符 ( 字母 ，数字，下划线_ ) \W : 非字符 .（点）——任意字符 \. : 真正的点 \b : 独立的部分 （ 起始，结束，空格 ） \B : 非独立的部分 量词： {n,m}：至少出现n次，最多m次 {n,} :至少n次 * :任意次 相当于{0,} ？ ：零次或一次 相当于{0,1} + ：一次或任意次相当于 {1,} {n}： 正好n次 符号： | : 或的意思 ()：，小括号，叫做分组符。就相当于数学里面的括号 [] ： 表示某个集合中的任意一个，比如 [abc] 整体代表一个字符 匹配 a b c 中的任意一个，也可以是范围，[0-9] 范围必须从小到大 [^a] 整体代表一个字符：^写在[]里面的话，就代表排除的意思 修饰符： i——ignore（正则中默认是区分大小写的 如果不区分大小写的话，在正则的最后加标识 i ） g——global（正则中默认，只要搜索到复合规则的内容就会结束搜索 ） 一、校验数字的表达式 1 数字：^[0-9]*$ 2 n位的数字：^\d{n}$ 3 至少n位的数字：^\d{n,}$ 4 m-n位的数字：^\d{m,n}$ 5 零和非零开头的数字：^(0|[1-9][0-9]*)$ 6 非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]{1,2})?$ 7 带1-2位小数的正数或负数：^(-)?\d+(.\d{1,2})?$ 8 正数、负数、和小数：^(-|+)?\d+(.\d+)?$ 9 有两位小数的正实数：^[0-9]+(.[0-9]{2})?$ 10 有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$ 11 非零的正整数：^[1-9]\d$ 或 ^([1-9][0-9]){1,3}$ 或 ^+?[1-9][0-9]*$ 12 非零的负整数：^-[1-9][]0-9”$ 或 ^-[1-9]\d$ 13 非负整数：^\d+$ 或 ^[1-9]\d*|0$ 14 非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$ 15 非负浮点数：^\d+(.\d+)?$ 或 ^[1-9]\d.\d|0.\d[1-9]\d|0?.0+|0$ 16 非正浮点数：^((-\d+(.\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\d.\d|0.\d[1-9]\d))|0?.0+|0$ 17 正浮点数：^[1-9]\d.\d|0.\d[1-9]\d$ 或 ^(([0-9]+.[0-9][1-9][0-9])|([0-9][1-9][0-9].[0-9]+)|([0-9][1-9][0-9]))$ 18 负浮点数：^-([1-9]\d.\d|0.\d[1-9]\d)$ 或 ^(-(([0-9]+.[0-9][1-9][0-9])|([0-9][1-9][0-9].[0-9]+)|([0-9][1-9][0-9])))$ 19 浮点数：^(-?\d+)(.\d+)?$ 或 ^-?([1-9]\d.\d|0.\d[1-9]\d|0?.0+|0)$ 二、校验字符的表达式 1 汉字：^[\u4e00-\u9fa5]{0,}$ 2 英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$ 3 长度为3-20的所有字符：^.{3,20}$ 4 由26个英文字母组成的字符串：^[A-Za-z]+$ 5 由26个大写英文字母组成的字符串：^[A-Z]+$ 6 由26个小写英文字母组成的字符串：^[a-z]+$ 7 由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$ 8 由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w{3,20}$ 9 中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$ 10 中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$ 11 可以输入含有^%&amp;’,;=?$\”等字符：[^%&amp;’,;=?$\x22]+ 12 禁止输入含有~的字符：[^~\x22]+ 三、特殊需求表达式 1 Email地址：^\w+([-+.]\w+)@\w+([-.]\w+).\w+([-.]\w+)*$ 2 域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.? 3 InternetURL：[a-zA-z]+://[^\s] 或 ^http://([\w-]+.)+[\w-]+(/[\w-./?%&amp;=])?$ 4 手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$ 5 电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$ 6 国内电话号码(0511-4405222、021-87888822)：\d{3}-\d{8}|\d{4}-\d{7} 7 身份证号(15位、18位数字)：^\d{15}|\d{18}$ 8 短身份证号码(数字、字母x结尾)：^([0-9]){7,18}(x|X)?$ 或 ^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$ 9 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$ 10 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w{5,17}$ 11 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.\d)(?=.[a-z])(?=.*[A-Z]).{8,10}$ 12 日期格式：^\d{4}-\d{1,2}-\d{1,2} 13 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$ 14 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$ 四、其它： 1 有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：^[1-9][0-9]*$ 2 这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$ 3 一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$ 4 这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$ 5 必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：^[0-9]+(.[0-9]{2})?$ 6 这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]{1,2})?$ 这样就允许用户只写一位小数. 7 下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$ 8 1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]{1,3}(,[0-9]{3}))(.[0-9]{1,2})?$ 备注：这就是最终结果了,别忘了”+”可以用”“替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里 9 xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$ 10 中文字符的正则表达式：[\u4e00-\u9fa5] 11 双字节字符：[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1)) 12 空白行的正则表达式：\n\s*\r (可以用来删除空白行) 13 HTML标记的正则表达式：&lt;(\S?)[^&gt;]&gt;.?&lt;/\1&gt;|&lt;.? /&gt; (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力) 14 首尾空白字符的正则表达式：^\s|\s$或(^\s)|(\s$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式) 15 腾讯QQ号：[1-9][0-9]{4,} (腾讯QQ号从10000开始) 16 中国邮政编码：[1-9]\d{5}(?!\d) (中国邮政编码为6位数字) 17 IP地址：\d+.\d+.\d+.\d+ (提取IP地址时有用) 18 IP地址：((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d)) 五、常用示例： 校验密码强度 密码的强度必须是包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间。 ^(?=.\d)(?=.[a-z])(?=.*[A-Z]).{8,10}$ 校验中文 字符串仅能是中文。 ^[\u4e00-\u9fa5]{0,}$ 由数字、26个英文字母或下划线组成的字符串 ^\w+$ 校验E-Mail 地址 同密码一样，下面是E-mail地址合规性的正则检查语句。 [\w!#$%&amp;’+/=?^_`{|}~-]+(?:\.[\w!#$%&amp;’+/=?^_`{|}~-]+)@(?:[\w](?:[\w-][\w])?\.)+\w? 校验身份证号码 15位： ^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$ 18位： ^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}([0-9]|X)$ 校验日期 “yyyy-mm-dd“ 格式的日期校验，已考虑平闰年。 ^(?:(?!0000)[0-9]{4}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$ 校验金额 金额校验，精确到2位小数。 ^[0-9]+(.[0-9]{2})?$ 校验手机号 下面是国内 13、15、18开头的手机号正则表达式。（可根据目前国内收集号扩展前两位开头号码） ^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$ 判断IE的版本 IE目前还没被完全取代，很多页面还是需要做版本兼容，下面是IE版本检查的表达式。 ^.MSIE 5-8?(?!.Trident\/[5-9]\.0).*$ 校验IP-v4地址 IP4 正则语句。 \b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b 校验IP-v6地址 IP6 正则语句。 (([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])) 检查URL的前缀 应用开发中很多时候需要区分请求是HTTPS还是HTTP，通过下面的表达式可以取出一个url的前缀然后再逻辑判断。 if (!s.match(/^[a-zA-Z]+:\/\//)){s = ‘http://‘ + s;} 提取URL链接 下面的这个表达式可以筛选出一段文本中的URL。 ^(f|ht){1}(tp|tps):\/\/([\w-]+\.)+[\w-]+(\/[\w- ./?%&amp;=]*)? 文件路径及扩展名校验 验证windows下文件路径和扩展名（下面的例子中为.txt文件） ^([a-zA-Z]\:|\\)\\([^\\]+\\)[^\/:?”&lt;&gt;|]+\.txt(l)?$ 提取Color Hex Codes 有时需要抽取网页中的颜色代码，可以使用下面的表达式。 ^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$ 提取网页图片 假若你想提取网页中所有图片信息，可以利用下面的表达式。 \&lt; [img][^\\&gt;][src] = [\“\‘]{0,1}([^\“\‘\ &gt;]*) 提取页面超链接 提取html中的超链接。 (&lt;a\s(?!.\brel=)[^&gt;])(href=”https?:\/\/)((?!(?:(?:www\.)?’.implode(‘|(?:www\.)?’, $follow_list).’))[^”]+)”((?!.\brel=)[^&gt;])(?:[^&gt;])&gt; 查找CSS属性 通过下面的表达式，可以搜索到相匹配的CSS属性。 ^\s[a-zA-Z\-]+\s[:]{1}\s[a-zA-Z0-9\s.#]+[;]{1} 抽取注释 如果你需要移除HMTL中的注释，可以使用如下的表达式。 匹配HTML标签 通过下面的表达式可以匹配出HTML中的标签属性。 &lt;\/?\w+((\s+\w+(\s=\s(?:”.?”|’.?’|[\^’”&gt;\s]+))?)+\s|\s)\/?&gt;]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[电子元器件质量检测代码整理]]></title>
    <url>%2F2018%2F05%2F03%2Fmvcode%2F</url>
    <content type="text"><![CDATA[电子元器件质量检测模型，主要过程包括：图像预处理、电子元器件检测与识别、图像配准、图像分割、缺陷分离、质量判定。 图像预处理 畸变校正 根据透镜的光学原理，透镜的任意位置上的折射率应该相等，但由于透镜制造精度以及组装工艺的偏差，造成透镜不同位置上的折射率不完全相等，光线在经过透镜的不同区域会产生不同程度的折射，导致成像上出现扭曲变形。这种几何失真就是图像的畸变，其中畸变的程度从图像中心至边缘依次递增,在边缘处反映得尤为明显。 采用张正友标定算法进行畸变校正： #imageClibra.py # -*- coding: utf-8 -*- &quot;&quot;&quot; Created on Tue Mar 15 2018 @author: Gaozong &quot;&quot;&quot; import numpy as np import cv2 import glob # termination criteria criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001) # prepare object points, like (0,0,0), (1,0,0), (2,0,0) ....,(6,5,0) objp = np.zeros((6*5,3), np.float32) objp[:,:2] = np.mgrid[0:25:5,0:30:5].T.reshape(-1,2) # Arrays to store object points and image points from all the images. objpoints = [] # 3d point in real world space imgpoints = [] # 2d points in image plane. images = glob.glob(&apos;data/*.jpg&apos;)#采集到的标定板图像 count=0 for fname in images: img = cv2.imread(fname) gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY) ret,thresh = cv2.threshold(gray,190,255,cv2.THRESH_BINARY_INV) # Find the chess board corners ret, corners = cv2.findChessboardCorners(thresh, (5,6),None) print ret # If found, add object points, image points (after refining them) if ret == True: count+=1 objpoints.append(objp) corners2 = cv2.cornerSubPix(gray,corners,(11,11),(-1,-1),criteria) imgpoints.append(corners2) # Draw and display the corners img = cv2.drawChessboardCorners(img, (5,6), corners2,ret) cv2.imshow(&apos;img&apos;,img) cv2.imwrite(&apos;clibrate/clib&apos;+str(count)+&apos;.jpg&apos;, img) cv2.waitKey(500) cv2.destroyAllWindows() #求取标定参数 ret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera(objpoints, imgpoints, gray.shape[::-1],None,None) # cv2.destroyAllWindows() # mtx为摄像机矩阵、dist为畸变系数、rvecs为旋转量、tvecs为平移量 print ret,&apos;\n&apos;,mtx,&apos;\n&apos;,dist,&apos;\n&apos;,rvecs,&apos;\n&apos;,tvecs 图像去噪 在电子元器件图像采集过程中可能出现的高斯噪声和脉冲噪声都属于加性噪声，可以通过空间滤波器完成图像的复原操作。 添加噪声 #getNoise.py # -*- coding: utf-8 -*- &quot;&quot;&quot; Created on Tue Mar 15 2018 @author: Gaozong &quot;&quot;&quot; import cv2 import numpy as np import skimage #读取原始图像 img=cv2.imread(&apos;hege/01.jpg&apos;,flags=0) #添加高斯噪声 img2=skimage.util.random_noise(img, mode=&apos;gaussian&apos;, seed=None, clip=True) #添加脉冲噪声，amount为脉冲噪声的密度 img3=skimage.util.random_noise(img, mode=&apos;salt&apos;, seed=None, clip=True,amount=0.005) #在添加高斯噪声基础上加入脉冲噪声 img4=skimage.util.random_noise(img2, mode=&apos;salt&apos;, seed=None, clip=True,amount=0.005) #保存图像 cv2.imwrite(&apos;LenaWgauss.jpg&apos;,img2*255) cv2.imwrite(&apos;LenaWsalt.jpg&apos;,img3*255) cv2.imwrite(&apos;LenaWboth.jpg&apos;,img4*255) 添加噪声函数说明： skimage.util.random_noise(image, mode=’gaussian’, seed=None, clip=True, **kwargs) - image : ndarray. Input image data. Will be converted to float. - mode : str. One of the following strings, selecting the type of noise to add: ‘gaussian’ Gaussian-distributed additive noise. ‘localvar’ Gaussian-distributed additive noise, with specified local variance at each point of image ‘poisson’ Poisson-distributed noise generated from the data. ‘salt’ Replaces random pixels with 1. ‘pepper’ Replaces random pixels with 0 (for unsigned images) or -1 (for signed images). ‘s&amp;p’ Replaces random pixels with either 1 or low_val, where low_val is 0 for unsigned images or -1 for signedimages. ‘speckle’ Multiplicative noise using out = image + n*image, where n is uniform noise with specified mean &amp; variance. - seed : int. If provided, this will set the random seed before generating noise,for valid pseudo-random comparisons. - clip : bool If True (default), the output will be clipped after noise appliedfor modes ‘speckle’, ‘poisson’, and ‘gaussian’. This isneeded to maintain the proper image data range. If False, clippingis not applied, and the output may extend beyond the range [-1, 1]. - mean : float Mean of random distribution. Used in ‘gaussian’ and ‘speckle’.Default : 0. - var : float Variance of random distribution. Used in ‘gaussian’ and ‘speckle’.Note: variance = (standard deviation) ** 2. Default : 0.01 - local_vars : ndarray Array of positive floats, same shape as image, defining the localvariance at every image point. Used in ‘localvar’. - amount : float Proportion of image pixels to replace with noise on range [0, 1].Used in ‘salt’, ‘pepper’, and ‘salt &amp; pepper’. Default : 0.05 - salt_vs_pepper : float Proportion of salt vs. pepper noise for ‘s&amp;p’ on range [0, 1].Higher values represent more salt. Default : 0.5 (equal amounts) Output - out : ndarray Output floating-point image data on range [0, 1] or [-1, 1] if theinput image was unsigned or signed, respectively. 图像滤波 #均值滤波 avaImg=cv2.blur(img4, (3,3)) cv2.imshow(&apos;avaImg&apos;,avaImg) cv2.waitKey() #高斯滤波 gassImg = cv2.GaussianBlur(img4,(3,3),0) cv2.imshow(&apos;gassImg&apos;,gassImg) cv2.waitKey() #中值滤波 img4=cv2.imread(&apos;LenaWboth.jpg&apos;,flags=0) medianImg = cv2.medianBlur(img4,3) cv2.imshow(&apos;medianImg&apos;,medianImg) cv2.waitKey() 自适应阿尔法滤波 修正的阿尔法均值滤波器，选取修正参数d值（d在中取值），在像素点处的的邻域中，去除灰度值最高的0.5d个像素和灰度值最低的0.5d个像素，用剩余的像素点的均值来代替元像素点的灰度值，以此去除图像噪声。 #adjustAlf.py # -*- coding: utf-8 -*- &quot;&quot;&quot; Created on Tue Mar 15 2018 @author: Gaozong &quot;&quot;&quot; import cv2 import numpy as np from matplotlib import pyplot as plt import Image #计算峰值信噪比 def psnr(A, B): return 10*np.log(255*255.0/(((A.astype(np.float)-B)**2).mean()))/np.log(10) #计算平方均值 # def mse(A, B): # return 10*np.log(255*255.0/(((A.astype(np.float)-B)**2).mean()))/np.log(10) #获取剩余像素点并求均值 def mean_filter(im,x, y, step,d): sum_s= im[(x-int(step/2)):(x+int(step/2)+1),(y-int(step/2)):(y+int(step/2)+1)] # print sum_s sum_ns=np.sort(sum_s.flatten()) newSum=sum_ns[int(0.5*d):(len(sum_s)-int(0.5*d))] sum_s = np.mean(np.array(newSum)) return sum_s #遍历图像像素点 def alf_filter(img,size,d): im_copy_med=np.zeros(img.shape) for i in range(int(size/2),im_copy_med.shape[0]-int(size/2)): for j in range(int(size/2),im_copy_med.shape[1]-int(size/2)): # print i,j im_copy_med[i][j] = mean_filter(img,i, j,size,d) return im_copy_med 目标检测识别 基于YOLO网络的检测方法将候选框提取、特征提取、目标分类、目标定位统一于一个神经网络中。神经网络直接从图像中提取候选区域，通过整幅图像特征来预测目标元件的位置和概率，将目标元件的定位问题转化为回归问题，实现端到端(end to end)的检测。目标元件的检测就是对输入的图像，进行候选框提取，判断其中是否包含目标元件，若有给出其位置。 yolo配置 网络结构配置 #yolo.cfg [net] batch=64#批量大小 subdivisions=8#批量细分为8块 height=416#图片大小 width=416 channels=3#通道数 momentum=0.9#上次梯度更新的权值 decay=0.0005#权重衰减值 #图像处理参数，增加样本数 angle=0#旋转 saturation = 1.5#透明度 exposure = 1.5#明暗 hue=.1#色彩饱和度 learning_rate=0.0001#初始学习率 max_batches = 25000#最大迭代次数 policy=steps#学习率调整策略 steps=500,2000,5000,12000 scales=10,.1,.1,.1#在不同Step对应学习率 [convolutional]#卷积层 batch_normalize=1#是否进行归一化(BN) filters=32#卷积核个数 size=3#卷积核大小 stride=1#滑动步长 pad=1#边缘扩充 activation=leaky#激活函数 [maxpool]#最大池化层 size=2 stride=2 ......... ......... [route]#passthrough融合其它卷积层特征 layers=-9#当前层数-9 [reorg]#特征重组层 stride=2#相邻随机取一个，26*26*512-&gt;13*13*2048 [route] layers=-1,-3#以该层为基准，取向上1层和3层输出，进行向量拼接 [convolutional] batch_normalize=1 size=3 stride=1 pad=1 filters=1024 activation=leaky [convolutional] size=1 stride=1 pad=1 filters=30 activation=linear [region] #锚点规格 anchors = 1.08,1.19, 3.42,4.41, 6.63,11.38, 9.42,5.11, 16.62,10.52 bias_match=1 classes=1#类别数 coords=4#位置框坐标数(x,y,w,h) num=5#每个网格预测框数 softmax=1 jitter=.2 rescore=1 object_scale=5#包含objict的loss系数 noobject_scale=1#不包含objct的loss系数 class_scale=1#类别的loss系数 coord_scale=2#目标位置的loss系数 absolute=1 thresh = .6#位置框判断阈值 random=0#是否使用多尺度训练 训练参数配置 #yolo.data #类别数 classes= 1 #训练集文件list train = /home/gz/Desktop/chips_yolo/gen_image_lables/train/train_list.txt #验证集list valid = /home/gz/Desktop/chips_yolo/gen_image_lables/train/valid_list.txt #类别名称 names = /home/gz/Desktop/chips_yolo/data/pin.name #模型参数路径 backup = backup 数据增强 人工标记框 #objectpostion.py # -*-coding=utf8-*- &quot;&quot;&quot; Created on Tue Mar 15 2018 @author: Gaozong &quot;&quot;&quot; #根据人工框选生成原始标签 import numpy as np import cv2 data_dir=&apos;../data/chip/&apos; image_name=data_dir+&apos;1_01.jpg&apos;#图片路径 img = cv2.imread(image_name) file_dir=&apos;label/&apos;#标签存储路径 drawing = False #鼠标按下为真 mode = True #如果为真，画矩形，按m切换为曲线 ix,iy=-1,-1 px,py=-1,-1 def draw_circle(event,x,y,flags,param): global ix,iy,drawing,px,py if event == cv2.EVENT_LBUTTONDOWN: drawing = True ix,iy=x,y # elif event == cv2.EVENT_MOUSEMOVE: # if drawing == True: # cv2.rectangle(img,(ix,iy),(px,py),(0,0,0),5)#将刚刚拖拽的矩形涂黑 # cv2.rectangle(img,(ix,iy),(x,y),(0,255,0),5) # px,py=x,y elif event == cv2.EVENT_LBUTTONUP: drawing = False # # add rectangle label cv2.rectangle(img,(ix,iy),(x,y),(0,255,0),3) cv2.imwrite(&apos;chips_label.jpg&apos;, img) file.write(str(ix)+&apos;\t&apos;+str(iy)+&apos;\t&apos;+str(x)+&apos;\t&apos;+str(y)+&apos;\n&apos;) px,py=-1,-1 cv2.namedWindow(&apos;image&apos;) file=open(file_dir+image_name.split(&apos;.&apos;)[-2].split(&apos;/&apos;)[-1]+&apos;_origin.txt&apos;,&apos;w&apos;) cv2.setMouseCallback(&apos;image&apos;,draw_circle) while(1): cv2.imshow(&apos;image&apos;,img) k = cv2.waitKey(1) &amp; 0xFF if k == ord(&apos;q&apos;) : file.close() break elif k == 27: file.close break cv2.destroyAllWindows() 生成数据及标签 模块函数 #generate.py # -*-coding=utf8-*- #用于生成图片、矫正图片位置 import numpy as np import os from keras.preprocessing.image import transform_matrix_offset_center, array_to_img, img_to_array, load_img,apply_transform import scipy as sp import scipy.misc # import imreg_dft as ird import matplotlib.pyplot as plt #随机生成变换参数 def param_random(x,rotation_range,height_shift_range,width_shift_range,shear_range,zoom_range): img_row_axis = x.shape[0]-1 img_col_axis = x.shape[1]-1 img_channel_axis = x.shape[2]-1 # use composition of homographies # to generate final transform that needs to be applied if height_shift_range: tx = np.random.uniform(-height_shift_range, height_shift_range) * img_row_axis else: tx = 0 if width_shift_range: ty = np.random.uniform(-width_shift_range, width_shift_range) * img_col_axis else: ty = 0 if rotation_range: theta = np.pi / 180 * np.random.uniform(-rotation_range, rotation_range) else: theta = 0 if shear_range: shear = np.random.uniform(-shear_range, shear_range) else: shear = 0 if zoom_range[0] == 1 and zoom_range[1] == 1: zx, zy = 1, 1 else: zx= np.random.uniform(zoom_range[0], zoom_range[1]) zy=zx return tx,ty,theta,shear,zx,zy #根据变换参数进行图像变换 def image_trans(x,tx,ty,theta,shear,zx,zy): &quot;&quot;&quot;Randomly augment a single image tensor. # Arguments x: 3D tensor, single image. # Returns A randomly transformed version of the input (same shape). &quot;&quot;&quot; # x is a single image, so it doesn&apos;t have image number at index 0 img_row_axis = x.shape[0]-1 img_col_axis = x.shape[1]-1 img_channel_axis = x.shape[2]-1 transform_matrix = None if theta != 0: rotation_matrix = np.array([[np.cos(theta), -np.sin(theta), 0], [np.sin(theta), np.cos(theta), 0], [0, 0, 1]]) transform_matrix = rotation_matrix if tx != 0 or ty != 0: shift_matrix = np.array([[1, 0, tx], [0, 1, ty], [0, 0, 1]]) transform_matrix = shift_matrix if transform_matrix is None else np.dot(transform_matrix, shift_matrix) if shear != 0: shear_matrix = np.array([[1, -np.sin(shear), 0], [0, np.cos(shear), 0], [0, 0, 1]]) transform_matrix = shear_matrix if transform_matrix is None else np.dot(transform_matrix, shear_matrix) if zx != 1 or zy != 1: zoom_matrix = np.array([[zx, 0, 0], [0, zy, 0], [0, 0, 1]]) transform_matrix = zoom_matrix if transform_matrix is None else np.dot(transform_matrix, zoom_matrix) if transform_matrix is not None: h, w = img_row_axis, img_col_axis # print transform_matrix transform_matrix = transform_matrix_offset_center(transform_matrix, h, w) x = apply_transform(x, transform_matrix, img_channel_axis, fill_mode=&apos;nearest&apos;) return x,transform_matrix #生成图片 def gen_image(x,count,result,rotation_range,height_shift_range,width_shift_range,shear_range,zoom_range,flag,save_dir,save_prefix,save_format): tx,ty,theta,shear,zx,zy=param_random(x,rotation_range,height_shift_range,width_shift_range,shear_range,zoom_range) # print tx,ty,theta,shear,zx,zy x,transform_matrix=image_trans(x,tx,ty,theta,shear,zx,zy) #生成位置标签 center_y=eval(result[0]+&apos;+&apos;+result[2])/2 center_x=eval(result[1]+&apos;+&apos;+result[3])/2 cord=np.array([center_x,center_y]).T # print transform_matrix matrix=transform_matrix[:2,2] rotate=np.array([[np.cos(theta), np.sin(theta)], [-np.sin(theta), np.cos(theta)]]) new_matrix=np.dot(np.array([[1/zx, 0], [0, 1/zy]]),rotate) label_center=np.dot(new_matrix,cord-matrix) top_left=np.dot(new_matrix,np.array([eval(result[1]),eval(result[0])]).T-matrix) top_right=np.dot(new_matrix,np.array([eval(result[1]),eval(result[2])]).T-matrix) bottom_left=np.dot(new_matrix,np.array([eval(result[3]),eval(result[0])]).T-matrix) bottom_right=np.dot(new_matrix,np.array([eval(result[3]),eval(result[2])]).T-matrix) ########## img = array_to_img(x) save_to_dir=save_dir+&apos;/gen_&apos;+flag if not os.path.exists(save_to_dir): os.makedirs(save_to_dir) fname = &apos;{prefix}_{count}.{format}&apos;.format(prefix=save_prefix,count=count,format=save_format) img.save(os.path.join(save_to_dir, fname)) return tx,ty,theta,shear,zx,zy,label_center,top_left,top_right,bottom_left,bottom_right #校正位置标签 def gen_label(origin_label,label_center,top_left,top_right,bottom_left,bottom_right,size): rect_axis=np.array([top_left,top_right,bottom_left,bottom_right]) [bottom,right]=np.max(rect_axis,0) [top,left]=np.min(rect_axis,0) if bottom&gt;size[0]: bottom=size[0] if right&gt;size[1]: right=size[1] if top&lt;0: top=0 if left&lt;0: left=0 return np.ceil(top),np.ceil(left),np.ceil(bottom),np.ceil(right) 根据图像和原始标签生成数据： #gen_data.py # -*-coding=utf8-*- &quot;&quot;&quot; Created on Tue Mar 15 2018 @author: Gaozong &quot;&quot;&quot; #生成标签数据 #输入：原图label #输出：图片及标签 import numpy as np import os import scipy.misc import matplotlib.pyplot as plt from generate import * rotation_range=90 #旋转角度 height_shift_range=0.1#纵向偏移 width_shift_range=0.1#横向偏移 shear_range=0#剪切变换 zoom_range=[1.5,3]#缩放 num=20#生成图片数目 flag=str(num)#文件夹标志 save_dir=&apos;../data&apos;#图片存储路径 label_dir=&apos;./label/&apos;#标签存储路径 save_prefix=&apos;pin&apos; save_format=&apos;jpg&apos; orig_label=label_dir+&apos;1_01_origin.txt&apos; img = load_img(&apos;../data/chip/1_01.jpg&apos;) # this is a PIL image # 存储图片标签文档 file1=open(label_dir+&apos;image_label.txt&apos;,&apos;w&apos;) # 存储图片变换参数 trans_label=open(label_dir+&apos;trans_label.txt&apos;,&apos;w&apos;) # 读取原始标签 file2=open(orig_label,&apos;r&apos;) if not os.path.exists(save_dir): os.makedirs(save_dir) if not os.path.exists(label_dir): os.makedirs(label_dir) origin_label=file2.readline().split() file2.close() x = img_to_array(img) size=x.shape for i in range(num): tx,ty,theta,shear,zx,zy,label_center,top_left,top_right,bottom_left,bottom_right=gen_image(x,i,origin_label,rotation_range,height_shift_range,width_shift_range,shear_range,zoom_range,flag,save_dir,save_prefix,save_format) trans_label.write(str(i)+&apos;\t&apos;+str(tx)+&apos;\t&apos;+str(ty)+&apos;\t&apos;+str(theta)+&apos;\t&apos;+str(zx)+&apos;\t&apos;+str(zy)+&apos;\n&apos;) # print tx,ty,theta,shear,zx,zy h1,w1,h2,w2=gen_label(origin_label,label_center,top_left,top_right,bottom_left,bottom_right, size) if (i+1)%10==0: print &apos;generate.....&apos;+str(i+1) file1.write(str(i)+&apos;\t&apos;+str(int(w1))+&apos;\t&apos;+str(int(h1))+&apos;\t&apos;+str(int(w2))+&apos;\t&apos;+str(int(h2))+&apos;\n&apos;) file1.close() 生成训练list 生成图片路径list #train/getimagelist.py #Generate image Path # -*-coding=utf8-*- &quot;&quot;&quot; Created on Tue Mar 15 2018 @author: Gaozong &quot;&quot;&quot; import os #图片路径 base_dir=&apos;/Users/gz/Workspace/chips_yolo/gen_image_lables/data/gen_2000&apos; #list存储路径 train=&apos;/Users/gz/Workspace/chips_yolo/gen_image_lables/train&apos; files=os.listdir(base_dir) imagepath=open(train+&apos;/imagepath.txt&apos;,&apos;w&apos;); for file in files: if file!=&apos;.DS_Store&apos;: genpath=os.path.join(base_dir,file); imagepath.write(genpath+&apos;\n&apos;); print &apos;imagepath.txt is complete&apos; imagepath.close() 生成训练和验证list #train/train_list.py #Generate train_list and label_list # -*-coding=utf8-*- &quot;&quot;&quot; Created on Tue Mar 15 2018 @author: Gaozong &quot;&quot;&quot; import random import numpy as np import os import re path=&apos;/Users/gz/Workspace/chips_yolo/gen_image_lables/&apos; #图片list路径 infile=open(path+&apos;train/imagepath.txt&apos;,&apos;r&apos;) #读取标签数据文档 label_file = open(path+&apos;gendata/label/image_label.txt&apos;) #单独标签文档存储路径 labelTxtPath=&apos;../data/gen_2000&apos; #位置标签归一化 def convert_labels(line): data=line.strip().split() # print line img_num=data[0] dw=1./1280 dh=1./960 x=(float(data[1])+float(data[3]))/2*dw y=(float(data[2])+float(data[4]))/2*dh w=(float(data[3])-float(data[1]))*dw h=(float(data[4])-float(data[2]))*dh # out_file.write(&apos;&apos;) return &apos;0&apos;+&apos; &apos;+str(x)+&apos; &apos;+str(y)+&apos; &apos;+str(w)+&apos; &apos;+str(h)+&apos;\n&apos; #生成标签文档 def gen_labelfile(label_path,labelTxtPath): if(not os.path.exists(labelTxtPath)): os.makedirs(labelTxtPath) for label in label_path: singlelabel=open(&apos;labelTxtPath/chips_&apos;+label.split()[0]+&apos;.txt&apos;,&apos;w&apos;) singlelabel.write(convert_labels(label)) singlelabel.close() #Training Path nums=0 lines=[] labels=[] #save path in Array for line in infile: lines.append(line) nums+=1 #random index，生成随机数 train_num=np.floor(nums*0.8) vaild_num=nums-train_num index=[i for i in range(nums)] random.shuffle(index) outfile=open(path+&apos;train/train_list.txt&apos;,&apos;w&apos;) validfile=open(path+&apos;train/valid_list.txt&apos;,&apos;w&apos;) for n in index: if(n&lt;=train_num): outfile.write(lines[n]) else: validfile.write(lines[n]) infile.close() outfile.close() validfile.close() #Generate label gen_labelfile(label_file,labelTxtPath) 模型训练 以开源的深度神经网络框架Darknet为基础，搭建网络模型，并进行训练。 ./darknet detector train cfg/yolo.data cfg/yolo.cfg darknet53.conv.74 对单张图片进行检测 ./darknet detector test cfg/yolo.data cfg/yolo.cfg yolo.weights data/dog.jpg -thresh 0 在验证集上进行检测 ./darknet detector recall cfg/yolo.data cfg/yolo.cfg yolo.weights 图像配准 傅里叶配准算法的核心是相位相关法，两幅具有平移量的图像经过傅里叶变换后，它们在频域上表现为相位不同；具有旋转量的图像在经过傅里叶变换后，在频域上表现为相同的旋转量；具有尺度缩放的图像，极坐标下经傅里叶变换后，映射到对数坐标系下可以转化为平移量进行处理。 图像变换到相同尺寸 首先对图像进行畸变校正，然后将其变换到相同尺寸 #align_test.py # -*-coding=utf8-*- &quot;&quot;&quot; Created on Tue Mar 15 2018 @author: Gaozong &quot;&quot;&quot; import os import scipy as sp import scipy.misc import time import Image from matplotlib import pyplot as plt import numpy as np import imreg_dft as ird import sys sys.path.append(&quot;binary/&quot;) from iter_best import * #摄像机内参 mtx=np.array([[5526.15,0,558.216],[0,5.52973614e+03,4.67279273e+02],[0,0,1]]) dist=np.array([[-3.87550438e-01,1.67434651e+00,-7.78018545e-04,6.76212640e-03,-7.95626592e-02]]) #畸变校正函数 def clibrate(im): img=cv2.imread(im) h, w = img.shape[:2] newcameramtx, roi=cv2.getOptimalNewCameraMatrix(mtx,dist,(w,h),1,(w,h)) # undistort dst = cv2.undistort(img, mtx, dist, None, newcameramtx) x,y,w,h = roi dst = dst[y:y+h, x:x+w] # plt.imshow(img) # plt.show() # plt.imshow(dst) # plt.show() return dst #图片resize,rect1和rect2分别为图像上目标元件的位置信息 def ImageResize(img1,img2,rect1=None,rect2=None): im1=Image.fromarray(clibrate(img1)) im2=Image.fromarray(clibrate(img2)) # 读取图片 # im1=Image.open(img1) # im2=Image.open(img2) # 剪切图片 # print rect1,rect2 if not (rect1 or rect2): region1=im1 region2=im2 size1=im1.size size2=im2.size # print size1,size2 else: region1=im1.crop(rect1) region2=im2.crop(rect2) # 图片填充至一样大小 size1=region1.size size2=region2.size #转化为数组 im1_array=np.array(region1) im2_array=np.array(region2) # 取最大背景尺寸，并填充 size=max(size1[1],size2[1]),max(size1[0],size2[0]) new_array1=np.ones(size)*im1_array[0][0][0] new_array2=np.ones(size)*im2_array[0][0][0] background1=Image.fromarray(new_array1) background2=Image.fromarray(new_array2) # print size1[0] # 图像粘贴 background1.paste(region1,(0,0)) background2.paste(region2,(0,0)) # 保存图像 save_path=&apos;Data/&apos; if not os.path.exists(save_path): os.mkdir(save_path) path1=save_path+img1.split(&apos;.&apos;)[0]+&apos;1_resize.jpg&apos; path2=save_path+img2.split(&apos;.&apos;)[0]+&apos;2_resize.jpg&apos; if background1.mode!=&apos;RGB&apos;: background1=background1.convert(&apos;RGB&apos;) background1.save(path1) if background2.mode!=&apos;RGB&apos;: background2=background2.convert(&apos;RGB&apos;) background2.save(path2) return path1,path2 图像配准 运用imreg_dft模块进行图像配准。 #align_test.py def convertTonum(arrAy): #字符转数字函数 newArray=[] for num in arrAy: newArray.append(int(num)) return newArray def align(image1,image2,truth,template,position,show,num,aligned): #image1,image2:图片路径 #truth:真实变换参数文档路径(用于计算配准误差)，txt文档 #template:模板图像中目标元件位置标签，txt文档 #position:检测出的目标位置信息，txt文档 #show:是否显示图片，true/false #num:图片编号，string #aligned:配准后图像的存储路径 if (template!=None)&amp;(position!=None): rect1=convertTonum(template.split()) rect2=convertTonum(position.split()[1:]) # print image1 path1,path2=ImageResize(image1, image2, rect1, rect2) im0=binaryIm(image1) im1=binaryIm(image2) # else: # # im0=imClosing(image1, 3, 20) # # im1=imClosing(image2, 3, 20) # # print image1 # # print image2 # im0=binaryIm(image1) # im1=binaryIm(image2) #统计配准时间 begin=time.time() result = ird.similarity(image1, image2, numiter=3) end=time.time() # print &apos;simTime:&apos;+str(end-begin) #变换参数，平移量tx、ty，旋转量theta(弧度)，缩放系数scale tx=result.get(&apos;tvec&apos;,&apos;not found&apos;)[0] ty=result.get(&apos;tvec&apos;,&apos;not found&apos;)[1] theta=result.get(&apos;angle&apos;,&apos;not found&apos;)*np.pi/180 scale=result.get(&apos;scale&apos;,&apos;not found&apos;) #校正变换平移量 ttx=np.cos(theta)*tx+np.sin(theta)*ty tty=-np.sin(theta)*tx+np.cos(theta)*ty assert &quot;timg&quot; in result # Maybe we don&apos;t want to show plots all the time if show: import matplotlib.pyplot as plt ird.imshow(image1, image2, result[&apos;timg&apos;]) plt.show() # print &quot;aliging&quot;+str(num) align_result=aligned if not os.path.exists(align_result): os.mkdir(align_result) #保存配准后图片 align_save=Image.fromarray(result[&apos;timg&apos;]) # temp_save=Image.fromarray(im0) if align_save.mode!=&apos;RGB&apos;: align_save=align_save.convert(&apos;RGB&apos;) align_save.save(align_result+str(num)+&apos;_align.jpg&apos;) # if temp_save.mode!=&apos;RGB&apos;: # temp_save=temp_save.convert(&apos;RGB&apos;) # temp_save.save(align_result+num+&apos;_temp.jpg&apos;) retIm=[] ##对配准图像进行二值化处理 #retIm=binaryIm(align_result+str(num)+&apos;_align.jpg&apos;,True) #计算配准误差 if truth: label=truth.split() return ttx,label[1],abs(ttx-eval(label[1])),tty,label[2],abs(tty-eval(label[2])),theta,label[3],abs(theta-eval(label[3])),scale,label[4],abs(scale-eval(label[4])),end-begin # x位移、y位移、旋转角、尺度、计算时间 return ttx,tty,theta,scale,end-begin,retIm 图像分割 主要考虑采用全局阈值分割方法进行元件的形状轮廓的提取。 双峰阈值分割 双峰阈值分割方法是根据图像的灰度直方图上出现明显双峰进行图像阈值选取，阈值取两峰之间的波谷。 #binary/doubleTop.py # -*-coding=utf8-*- &quot;&quot;&quot; Created on Tue Mar 15 2018 @author: Gaozong &quot;&quot;&quot; # -*-coding=utf8-*- import cv2 import numpy as np from matplotlib import pyplot as plt def dtop(im,minPix=0,maxPix=255): #minPix、maxPix需要检测的灰度值区间 #返回值：分割阈值 Iter=0 length=maxPix-minPix hist=cv2.calcHist(im, [0], None,[length], [minPix,maxPix]) # plt.plot(hist) # plt.show() while isDiodal(hist)==False: # plt.plot(hist48.jpg hist[0]=(hist[0]*2+hist[1])/3.0 for x in range(1,length-1): hist[x]=(hist[x-1]+hist[x]+hist[x+1])/3.0 hist[length-1]=(hist[length-1]*2+hist[length-2])/3.0 Iter+=1 if(Iter&gt;1000): return False top,trough=isDiodal(hist) for thresh in trough: if thresh&lt;top[1] and thresh&gt;top[0]: return thresh+minPix #判断直方图是否为双峰 def isDiodal(hist): count=0 top=[] trough=[] for x in range(1,len(hist)-1): if(hist[x-1]&lt;hist[x]) and (hist[x+1]&lt;hist[x]): count+=1 top.append(x) # print top if count&gt;2: return False if(hist[x-1]&gt;hist[x]) and (hist[x+1]&gt;hist[x]): trough.append(x) if(count==2): return top,trough else: return False ##单张图片测试 # im=cv2.imread(&quot;../../data/detect/hege2/48.jpg&quot;) # threshold=dtop(im,0,255) # ret,thresh=cv2.threshold(im, threshold,255,0) # plt.imshow(thresh) # plt.show() 迭代阈值分割 给定一个初始阈值，通过该阈值将图像分为前景和背景，分别计算前景和背景的灰度的平均灰度值，将二者的平均值作为新的分割阈值，直至连续两次的分割阈值相等，则该阈值为最佳阈值。 #binary/iter_best.py # -*-coding=utf8-*- &quot;&quot;&quot; Created on Tue Mar 15 2018 @author: Gaozong &quot;&quot;&quot; import cv2 import numpy as np from matplotlib import pyplot as plt #图像二值化函数 def imClosing(im,kernel_size,threshold): blur=cv2.medianBlur(im,3)#中值滤波 ret,thresh = cv2.threshold(blur,threshold,255,0)#图像二值化 if kernel_size==0: return thresh kernel = np.ones((kernel_size,kernel_size),np.uint8) #图像闭运算 closing = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel) return closing #阈值迭代 def iter_best(im): # print np.max(im),np.min(im) t0=(int(np.max(im))+int(np.min(im)))/2 # print t0 # num=1 while t0!=divIm(im, t0): # print num # num+=1 t0=divIm(im, t0) # print t0 return t0 #前景和背景分割 def divIm(im,t): front=im[im&gt;t] back=im[im&lt;=t] ava_f=int(np.sum(front)/len(front)) ava_b=int(np.sum(back)/len(back)) return (ava_f+ava_b)/2 #用最佳迭代阈值进行二值化 def binaryIm(impath,template=False): im=cv2.imread(impath,0) thresh=iter_best(im) # print thresh if template: # print &apos;itertime:&apos;+str(time.time()-begin) # print thresh im0=imClosing(im,0,thresh) return im0 else: #在最佳迭代阈值的邻域内，进行多次二值化，得到多幅二值化图像 im_array=[] for i in range(-2,3): im_array.append(imClosing(im,0,thresh+i)) return im_array 大津算法 OSTU算法是日本学者OSTU于1979年提出的，是一种自适应阈值的全局阈值分割算法，通过穷举的方法找到一个阈值，使得前景和背景的类间方差最大。 以下代码是经遗传算法优化后的大津算法，代码来源：A program for binarizing images based on genetic algorithm #Ostu_gen.py # -*-coding=utf8-*- import cv2 import operator import random import numpy as np import matplotlib.pyplot as plt from scipy import misc # calculate fitness def calOstu(th, hist): omega1 = float(sum(hist[0:th])) / sum(hist) omega2 = 1 - omega1 ip = 0 for i in xrange(th): ip += i * hist[i] miu1 = float(ip) / sum(hist) ip = 0 for i in xrange(th, 255): ip += i * hist[i] miu2 = float(ip) / sum(hist) miu = miu1 + miu2 g = omega1 * (miu1 - miu) ** 2 + omega2 * ((miu2 - miu) ** 2) return g # calculate cumulative probability def calCumPro(totalg, chromosomes): newgener = [] # calculate probability for chrom in chromosomes: newgener.append([chrom[0], chrom[1] / totalg]) # calculate cumulative probability for i in xrange(1, len(chromosomes)): newgener[i][1] += newgener[i-1][1] return newgener # choose chromosomes to evolve def chooseChrom(chromosomes): _sum = 0 for i in xrange(len(chromosomes)): _sum += chromosomes[i][1] chromosomes = calCumPro(_sum, chromosomes) ps = [] # get picking-up probability randomly for i in xrange(len(chromosomes)): ps.append(random.random()) newgener = [] # pick up chromosomes for p in ps: for chrom in chromosomes: if p &lt;= chrom[1]: newgener.append(chrom) break else: continue continue return newgener # exchange chromosomes def exchange(exRate, length, chromosomes): exNum = int(exRate * len(chromosomes)) # make sure even number of chromosomes if exNum % 2 == 1: exNum -= 1 # pick up random exNum chromosomes to exchange ixes = random.sample(xrange(len(chromosomes)), exNum) newgener = [] # copy other chromosomes for i in xrange(len(chromosomes)): if i not in ixes: newgener.append(chromosomes[i]) # do exchange for i in range(0, len(ixes), 2): seg_h1 = chromosomes[ixes[i]][0] &gt;&gt; length &lt;&lt; length seg_t1 = chromosomes[ixes[i]][0] - seg_h1 seg_h2 = chromosomes[ixes[i+1]][0] &gt;&gt; length &lt;&lt; length seg_t2 = chromosomes[ixes[i+1]][0] - seg_h2 newgener.append([seg_h1 + seg_t2, 0]) newgener.append([seg_h2 + seg_t1, 0]) return newgener # varying chromosomes def vary(varyRate, chromosomes): vrNum = int(varyRate * len(chromosomes)) ixes = random.sample(xrange(len(chromosomes)), vrNum) for i in xrange(len(chromosomes)): if i in ixes: randint = random.randint(0, 31) if chromosomes[i][0] &gt; randint: chromosomes[i][0] -= randint else: chromosomes[i][0] = randint - chromosomes[i][0] # old algorithm, works inefficiently # chromosomes[i][0] = (~(chrom - (chrom &gt;&gt; bits &lt;&lt; bits)) \ # &amp; (2 ** bits - 1)) + (chrom &gt;&gt; bits &lt;&lt; bits) return chromosomes # binarize image def binarize(path, th, img): binarized_img = [[255 if x &gt; th else 0 for x in r] for r in img] # bin_path = path.split(&apos;.&apos;)[1] + &apos;_bin.jpg&apos; # misc.imsave(bin_path, binarized_img) # img = cv2.imread(bin_path, 0) return binarized_img # calculate best threshold by a naive way def naiveFindBestThreshold(path): th = 0 g = 0 thtemp = 0 gtemp = 0 img = cv2.imread(path, 0) hist = np.bincount(img.ravel(),minlength=256) for thtemp in xrange(256): gtemp = calOstu(thtemp, hist) if gtemp &gt; g: th = thtemp g = gtemp bin_path = binarize(path, th,img) return bin_path, th def main(path, cnt, population, cross_ratio, vary_ratio): img = cv2.imread(path, 0) hist = np.bincount(img.ravel(),minlength=256) generation = 1 s = random.sample(xrange(256), population) chromosomes = [[x, 0] for x in s] _sum = 0 length = 4 lstbest = 0 count = 0 exRate = cross_ratio varyRate = vary_ratio degen = True while True: # print &quot;generation %d:&quot; % generation for i in xrange(len(chromosomes)): # show chromosome status # print &apos;{0:08b}&apos;.format(chromosomes[i][0]) chromosomes[i][1] = calOstu(chromosomes[i][0], hist) if chromosomes[i][1] &gt;= lstbest: # A better chromosome appears if chromosomes[i][1] &gt; lstbest: count = 0 # not worse lstbest = chromosomes[i][1] th = chromosomes[i][0] degen = False # if worse, use last generation if degen == True: for i in xrange(len(chromosomes)): chromosomes[i][0], chromosomes[i][1] = lstgen[i][0], lstgen[i][1] else: # default set degeneration to True degen = True # best chromosome stay fixed for 1000 generations, terminate loop if count == cnt: break # calculate sum of between-class variance count += 1 # backup this generation lstgen = [] for chromo in chromosomes: lstgen.append([chromo[0], chromo[1]]) # choose chromosomes to exchange chromosomes = chooseChrom(chromosomes) # do exchange chromosomes = exchange(exRate, length, chromosomes) # do vary chromosomes = vary(varyRate, chromosomes) generation += 1 # print &quot;best threshold: &quot; + str(th) # bin_path = binarize(path, th, img) return binarize(path, th, img) 元件差异性检测 经图像配准后，待测元件和标准元件在各自图像上处于同一位置，通过图像处理技术，对比匹配后的图像，分离出电子元器件上的缺陷部分，根据缺陷部分的大小来判断电子元器件是否合格。需要上述函数align_test.py 孔洞填充 #diffDetect.py # -*-coding=utf8-*- &quot;&quot;&quot; Created on Tue Mar 15 2018 @author: Gaozong &quot;&quot;&quot; import os import Image import numpy as np import matplotlib.pyplot as plt import cv2 #以下为自定义函数 from align_test import * #根据轮廓面积，对轮廓进行排序 def sortCnt(contours): maxarea=0 length=len(contours) for j in range(length-1): for i in range(length-1-j): area1=cv2.contourArea(contours[i]) area2=cv2.contourArea(contours[i+1]) if(area1&lt;area2): temp=contours[i] contours[i]=contours[i+1] contours[i+1]=temp return contours #对元器件进行轮廓检测 def drawCnt(im,show=False): image, contours, hierarchy = cv2.findContours(im,cv2.RETR_TREE,cv2.CHAIN_APPROX_NONE) if len(contours)&lt;2: # cv2.drawContours(im, contours,0, (0,0,0), cv2.FILLED) if show: plt.imshow(im,cmap=&apos;gray&apos;) plt.show() return im newCnt=sortCnt(contours) #选出除图形边框外的最大轮廓，对电子元器件的内孔洞进行填充 cv2.drawContours(im, newCnt,1, (0,0,0), cv2.FILLED) if show: plt.imshow(im,cmap=&apos;gray&apos;) plt.show() return im 缺陷面积检测 #diffDetect.py # -*-coding=utf8-*- &quot;&quot;&quot; Created on Tue Mar 15 2018 @author: Gaozong &quot;&quot;&quot; def diffAreas(image1,image2,num=0,aligned=&apos;Image/&apos;,show=False): #image1、image2:二值化后的图像，array #aligned:配准后图像存储路径 #show:是否显示过程,true/false import time begin1=time.time() ttx,tty,theta,scale,t,im_align=align(image1, image2, None, None, None, show, num,aligned) # print ttx,tty,theta end1=time.time()-begin1 print &apos;aligntime:&apos;+str(end1) img1=drawCnt(image1,show) img2=drawCnt(im_align,show) #差异性检测 diff = np.array(abs(img1-img2)) # plt.imshow(diff) # plt.show() cv2.imwrite(&apos;Image/diff.jpg&apos;, diff) diff_rgb=cv2.imread(&apos;Image/diff.jpg&apos;) # diff_g=cv2.imread(&apos;Image/diff.jpg&apos;, 0) image, contours, hierarchy = cv2.findContours(diff,cv2.RETR_TREE,cv2.CHAIN_APPROX_NONE) cv2.drawContours(diff, contours, -1, (0,0,0),cv2.FILLED) area=[] area_total=0 new_contour=[] cnt_pos=[] #对差异部分进行筛选，过滤掉小面积缺陷 for contour in contours: x,y,w,h = cv2.boundingRect(contour) if(w!=1 and w!=0) or (h!=1 and w!=0): single_area=cv2.contourArea(contour) if(single_area&gt;30): area.append(single_area) area_total=area_total+single_area new_contour.append(contour) cnt_pos.append((x,y,w,h)) print &apos;detect:&apos;+str(time.time()-begin1) if show: # plt.imshow(image,cmap=&apos;gray&apos;) # plt.show() cv2.drawContours(diff_rgb, new_contour, -1, (0,255,0), cv2.FILLED) plt.imshow(diff_rgb) plt.text(300,0,&quot;Areas=&quot;+str(area_total),size=15,color=&apos;k&apos;) if(area_total&lt;800): plt.text(0,0,&quot;OK&quot;,size=20,color=&apos;g&apos;) else: plt.text(0,0,&quot;NOT OK&quot;,size=20,color=&apos;r&apos;) plt.show() return area_total 阈值确定 假设合格产品的缺陷面积服从正态分布，并以此提出了基于小概率事件原理的阈值确定方法。运用Shapiro-Wilks方法进行实验验证，Shapiro-Wilks检验是用于验证一个随机样本数据是否来自正态分布。 #k_test.py # -*-coding=utf8-*- &quot;&quot;&quot; Created on Tue Mar 15 2018 @author: Gaozong &quot;&quot;&quot; import numpy as np from scipy.stats import kstest,shapiro,anderson #x为合格样本产生的缺陷面积 x=[172,198.5,224,355.5,312,377.5,85.5,65.5,74,252,70.5,166,211,161.5,175.5,431.5,288,281,167,195,263.5,330,143,115,43.5,120,224,210.5,253.5,121] #排序函数 def sortCnt(contours): maxarea=0 length=len(contours) for j in range(length-1): for i in range(length-1-j): if(contours[i]&gt;contours[i+1]): temp=contours[i] contours[i]=contours[i+1] contours[i+1]=temp print length return contours #平均值、标准差、阈值、shapiro检验结果 print np.mean(x) print np.std(x) print 2*np.std(x)+np.mean(x) print shapiro(sortCnt(x))]]></content>
      <categories>
        <category>codeblock</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>MachineVision</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS代码模块]]></title>
    <url>%2F2018%2F05%2F02%2Fjsblock%2F</url>
    <content type="text"><![CDATA[常用的JavaScript功能模块。 去除字符串中空格 1、去掉字符串前后所有空格 function Trim(str) { return str.replace(/(^\s*)|(\s*$)/g, &quot;&quot;); } 2、去掉字符串中所有空格(is_global=&quot;g&quot;) function Trim(str, is_global) { var result; result = str.replace(/(^\s+)|(\s+$)/g, &quot;&quot;); if (is_global.toLowerCase() == &quot;g&quot;) { result = result.replace(/\s/g, &quot;&quot;); } return result; }]]></content>
      <categories>
        <category>codeblock</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Code</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python代码模块]]></title>
    <url>%2F2018%2F05%2F02%2Fpythonblock%2F</url>
    <content type="text"></content>
      <categories>
        <category>codeblock</category>
      </categories>
      <tags>
        <tag>Code</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown语法]]></title>
    <url>%2F2018%2F05%2F01%2Fmkdown%2F</url>
    <content type="text"><![CDATA[Markdown是一种轻量级标记语言，它用简洁的语法代替排版，使我们专心于码字。它的目标是实现易读易写，成为一种适用于网络的书写语言。同时，Markdown支持嵌入html标签。 Markdown特点 兼容 HTML Markdown 的格式语法只涵盖纯文本可以涵盖的范围，不在 Markdown 涵盖范围之内的标签，都可以直接在文件里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签即可。 在 Markdown 文件里加上一段 HTML 表格： This is a regular paragraph. &lt;table&gt; &lt;tr&gt; &lt;td&gt;Foo&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; This is another regular paragraph. 注意： 区块元素──比如 &lt;div&gt;、&lt;table&gt;、&lt;pre&gt;、&lt;p&gt; 等标签，必须在前后加上空行与其它内容区隔开，而且这些（元素）的开始与结尾标签，不可以用制表符或空格来缩进。 Markdown 语法在 HTML 区块标签中将不会被进行处理，而Markdown 语法在 HTML 区段标签间是有效的。 HTML 的区段（行内）标签如 &lt;span&gt;、&lt;cite&gt;、&lt;del&gt; 则不受限制，可以在 Markdown 的段落、列表或是标题里任意使用。依照个人习惯，甚至可以不用Markdown 格式，而直接采用 HTML 标签来格式化。 特殊字符自动转换 在 HTML 文件中，有两个字符需要特殊处理： &lt; 和 &amp; 。 &lt; 符号用于起始标签，&amp; 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 &amp;lt; 和 &amp;amp;。 &amp; 符号其实很容易让写作网络文件的人感到困扰，如果你要打「AT&amp;T」 ，你必须要写成「AT&amp;amp;T」 ，而且网址中的 &amp; 字符也要转换。如果你要链接到： http://images.google.com/images?num=30&amp;q=larry+bird 你必须要把网址写成： http://images.google.com/images?num=30&amp;amp;q=larry+bird 才能放到链接标签的 href 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检查所检查到的错误中，数量最多的。 Markdown 可以自动处理这些符号，如果你使用的 &amp; 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 &amp;amp;。所以你如果要在文件中插入一个著作权的符号，你可以这样写： &amp;copy; Markdown 将不会对这段文字做修改，但是如果你这样写： AT&amp;T Markdown 就会将它转为： AT&amp;amp;T 类似的状况也会发生在 &lt; 符号上，因为 Markdown 支持 兼容 HTML ，如果你是使用 &lt; 符号作为 HTML 标签使用，那 Markdown 也不会对它做任何转换，但是如果你是写： 4 &lt; 5 Markdown 将会把它转换为： 4 &amp;lt; 5 不过需要注意的是，code 范围内，不论是行内还是区块， &lt; 和 &amp; 两个符号都一定会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 &lt; 和 &amp; 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。） 区块元素 段落和换行 一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。 「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 &lt;br /&gt; 标签。 如果你真的想要插入 &lt;br /&gt; 标签的话，在行尾加上两个以上的格然后回车。 是的，这确实需要花比较多功夫来插入 &lt;br /&gt; ，但是「每个换行都转换为 &lt;br /&gt;」的方法在 Markdown 中并不适合， Markdown 中 email 式的 区块引用 和多段落的 列表 在使用换行来排版的时候，不但更好用，还更好阅读。 标题 Markdown 支持两种标题的语法，类 [Setext] [1] 和类 [atx] [2] 形式。 类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），例如： This is an H1 ============= This is an H2 ------------- 任何数量的 = 和 - 都可以有效果。 类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如： # This is an H1 ## This is an H2 ###### This is an H6 你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 #，而行尾的 # 数量也不用和开头一样（行首的井字数量决定标题的阶数）： # This is an H1 # ## This is an H2 ## ### This is an H3 ###### Blockquotes Markdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 &gt; ： &gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, &gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. &gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. &gt; &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse &gt; id sem consectetuer libero luctus adipiscing. Markdown 也允许你只在整个段落的第一行最前面加上 &gt; ： &gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. 区块引用可以有嵌套（例如：引用内的引用），只要根据层数加上不同数量的 &gt; ： &gt; This is the first level of quoting. &gt; &gt; &gt; This is nested blockquote. &gt; &gt; Back to the first level. 引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等： &gt; ## This is a header. &gt; &gt; 1. This is the first list item. &gt; 2. This is the second list item. &gt; &gt; Here&apos;s some example code: &gt; &gt; return shell_exec(&quot;echo $input | $markdown_script&quot;); 任何标准的文本编辑器都能简单地建立 email 样式的引用，例如 BBEdit ，你可以选取文字后然后从选单中选择增加引用阶层。 列表 Markdown 支持有序列表和无序列表。 无序清单使用星号、加号或是减号作为列表标记： * Red * Green * Blue 等同于： + Red + Green + Blue 也等同于： - Red - Green - Blue 有序列表则使用数字接着一个英文句点： 1. Bird 2. McHale 3. Parish 很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为： &lt;ol&gt; &lt;li&gt;Bird&lt;/li&gt; &lt;li&gt;McHale&lt;/li&gt; &lt;li&gt;Parish&lt;/li&gt; &lt;/ol&gt; 如果你的列表标记写成： 1. Bird 1. McHale 1. Parish 或甚至是： 3. Bird 1. McHale 8. Parish 你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。 如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。 列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。 要让列表看起来更漂亮，你可以把内容用固定的缩进整理好： * Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. * Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. 但是如果你很懒，那也行： * Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. * Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. 如果列表项目间用空行分开， 在输出 HTML 时 Markdown 会把项目的内容在输出时用 &lt;p&gt;标签包起来，举例来说： * Bird * Magic 会被转换为： &lt;ul&gt; &lt;li&gt;Bird&lt;/li&gt; &lt;li&gt;Magic&lt;/li&gt; &lt;/ul&gt; 但是这个： * Bird * Magic 会被转换为： &lt;ul&gt; &lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt; 列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符： 1. This is a list item with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit. 2. Suspendisse id sem consectetuer libero luctus adipiscing. 如果你每行都有缩进，看起来会看好很多，当然，Markdown 也允许： * This is a list item with two paragraphs. This is the second paragraph in the list item. You&apos;re only required to indent the first line. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. * Another item in the same list. 如果要在列表项目内放进引用，那 &gt; 就需要缩进： * A list item with a blockquote: &gt; This is a blockquote &gt; inside a list item. 如果要放代码区块的话，该区块就需要缩排两次，也就是 8 个空格或是 2 个制表符： * A list item with a code block: &lt;code goes here&gt; 当然，项目列表很可能会不小心产生，像是下面这样的写法： 1986. What a great season. 换句话说，也就是在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠。 1986\. What a great season. 程序代码区块 和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 &lt;pre&gt; 和 &lt;code&gt; 标签来把代码区块包起来。 要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入： This is a normal paragraph: This is a code block. Markdown 会转换成： &lt;p&gt;This is a normal paragraph:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;This is a code block. &lt;/code&gt;&lt;/pre&gt; 这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如： Here is an example of AppleScript: tell application &quot;Foo&quot; beep end tell 会被转换为： &lt;p&gt;Here is an example of AppleScript:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;tell application &quot;Foo&quot; beep end tell &lt;/code&gt;&lt;/pre&gt; 一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。 在代码区块里面， &amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如： &lt;div class=&quot;footer&quot;&gt; &amp;copy; 2004 Foo Corporation &lt;/div&gt; 会被转换为： &lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;footer&quot;&amp;gt; &amp;amp;copy; 2004 Foo Corporation &amp;lt;/div&amp;gt; &lt;/code&gt;&lt;/pre&gt; 代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。 分隔线 你可以在一行中用三个或以上的星号、减号来建立一个分隔线，行内不能有其他东西。你也可以在星号中间插入空格。下面每种写法都可以建立分隔线： * * * *** ***** - - - --------------------------------------- 区段元素 链接 Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。 不管是哪一种，链接的文字都是用 [方括号] 来标记。 要建立一个行内式的链接，只要在方括号后面马上接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如： This is [an example](http://example.com/ &quot;Title&quot;) inline link. [This link](http://example.net/) has no title attribute. 会产生： &lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt; an example&lt;/a&gt; inline link.&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no title attribute.&lt;/p&gt; 如果你是要链接到同样主机的资源，你可以使用相对路径： See my [About](/about/) page for details. 参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记： This is [an example][id] reference-style link. 你也可以选择性地在两个方括号中间加上空格： This is [an example] [id] reference-style link. 接着，在文件的任意处，你可以把这个标签的链接内容定义出来： [id]: http://example.com/ &quot;Optional Title Here&quot; 链接内容定义的形式为： 方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字 接着一个冒号 接着一个以上的空格或制表符 接着链接的网址 选择性地接着 title 内容，可以用单引号、双引号或是圆括号包着 下面这三种连结的定义都是相同： [foo]: http://example.com/ &quot;Optional Title Here&quot; [foo]: http://example.com/ &apos;Optional Title Here&apos; [foo]: http://example.com/ (Optional Title Here) 请注意：有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。 链接网址也可以用方括号包起来： [id]: &lt;http://example.com/&gt; &quot;Optional Title Here&quot; 你也可以把 title 属性放到下一行，也可以加一些缩进，网址太长的话，这样会比较好看： [id]: http://example.com/longish/path/to/resource/here &quot;Optional Title Here&quot; 网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。 链接辨识标记可以有字母、数字、空白和标点符号，但是并不区分大小写，因此下面两个链接是一样的： [link text][a] [link text][A] 隐式链接标记功能让你可以省略指定链接标记，这种情形下，链接标记和链接文字会视为相同，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 “Google” 链接到 google.com，你可以简化成： [Google][] 然后定义链接内容： [Google]: http://google.com/ 由于链接文字可能包含空白，所以这种简化的标记内也可以包含多个单词： Visit [Daring Fireball][] for more information. 然后接着定义链接： [Daring Fireball]: http://daringfireball.net/ 链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。 下面是一个参考式链接的范例： I get 10 times more traffic from [Google] [1] than from [Yahoo] [2] or [MSN] [3]. [1]: http://google.com/ &quot;Google&quot; [2]: http://search.yahoo.com/ &quot;Yahoo Search&quot; [3]: http://search.msn.com/ &quot;MSN Search&quot; 如果改成用链接名称的方式写： I get 10 times more traffic from [Google][] than from [Yahoo][] or [MSN][]. [google]: http://google.com/ &quot;Google&quot; [yahoo]: http://search.yahoo.com/ &quot;Yahoo Search&quot; [msn]: http://search.msn.com/ &quot;MSN Search&quot; 上面两种写法都会产生下面的 HTML。 &lt;p&gt;I get 10 times more traffic from &lt;a href=&quot;http://google.com/&quot; title=&quot;Google&quot;&gt;Google&lt;/a&gt; than from &lt;a href=&quot;http://search.yahoo.com/&quot; title=&quot;Yahoo Search&quot;&gt;Yahoo&lt;/a&gt; or &lt;a href=&quot;http://search.msn.com/&quot; title=&quot;MSN Search&quot;&gt;MSN&lt;/a&gt;.&lt;/p&gt; 下面是用行内形式写的同样一段内容的 Markdown 文件，提供作为比较之用： I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;) than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or [MSN](http://search.msn.com/ &quot;MSN Search&quot;). 参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的连结却会增加到 176 个字符，如果是用纯 HTML 格式来写，会有 234 个字符，在 HTML 格式中，标签比文字还要多。 使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的信息移到段落文字之外，你就可以增加连结而不让文章的阅读感觉被打断。 锚点 网页中，锚点其实就是页内超链接，也就是链接本文档内部的某些元素，实现当前页面中的跳转。比如我这里写下一个锚点，点击回到目录，就能跳转到目录。 在目录中点击这一节，就能跳过来。还有下一节的注脚。这些根本上都是用锚点来实现的。 注意： Markdown Extra 只支持在标题后插入锚点，其它地方无效。 Leanote 编辑器右侧显示效果区域暂时不支持锚点跳转，所以点来点去发现没有跳转不必惊慌，但是你发布成笔记或博文后是支持跳转的。 例如： ## 0. 目录{#index} 跳转到[目录](#index) 注脚 在需要添加注脚的文字后加上脚注名字[^注脚名字],称为加注。 然后在文本的任意位置(一般在最后)添加脚注，脚注前必须有对应的脚注名字。注意：经测试注脚与注脚之间必须空一行，不然会失效。成功后会发现，即使你没有把注脚写在文末，经Markdown转换后，也会自动归类到文章的最后。 使用 Markdown[^1]可以效率的书写文档, 直接转换成 HTML[^2], 你可以使用 Leanote[^Le] 编辑器进行书写。 [^1]:Markdown是一种纯文本标记语言 [^2]:HyperText Markup Language 超文本标记语言 [^Le]:开源笔记平台，支持Markdown和笔记直接发为博文 强调 Markdown 使用星号（*）和底线（_）作为标记强调字词的符号，被 * 或 _ 包围的字词会被转成用 &lt;em&gt; 标签包围，用两个 * 或 _ 包起来的话，则会被转成 &lt;strong&gt;，例如： *single asterisks* _single underscores_ **double asterisks** __double underscores__ 会转成： &lt;em&gt;single asterisks&lt;/em&gt; &lt;em&gt;single underscores&lt;/em&gt; &lt;strong&gt;double asterisks&lt;/strong&gt; &lt;strong&gt;double underscores&lt;/strong&gt; 你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。 强调也可以直接插在文字中间： un*frigging*believable 但是如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号。 如果要在文字前后直接插入普通的星号或底线，你可以用反斜杠： \*this text is surrounded by literal asterisks\* 代码 如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如： Use the `printf()` function. 会产生： &lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt; 如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段： ``There is a literal backtick (`) here.`` 这段语法会产生： &lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt; 代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号： A single backtick in a code span: `` ` `` A backtick-delimited string in a code span: `` `foo` `` 会产生： &lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt; &lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt; 在代码区段内，&amp; 和方括号都会被转成 HTML 实体，这样会比较容易插入 HTML 原始码，Markdown 会把下面这段： Please don&apos;t use any `&lt;blink&gt;` tags. 转为： &lt;p&gt;Please don&apos;t use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt; 你也可以这样写： `&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`. 以产生： &lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encoded equivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt; 图片 很明显地，要在纯文本应用中设计一个 「自然」的语法来插入图片是有一定难度的。 Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。 行内式图片的语法看起来像是： ![Alt text](/path/to/img.jpg) ![Alt text](/path/to/img.jpg &quot;Optional title&quot;) 详细叙述如下： 一个惊叹号 ! 接着一对方括号，里面放上图片的替代文字 接着一对普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 文字。 参考式的图片语法则长得像这样： ![Alt text][id] 「id」是图片参考的名称，图片参考的定义方式则和链接参考一样： [id]: url/to/image &quot;Optional title attribute&quot; 到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 &lt;img&gt; 标签。 其它 自动链接 Markdown 支持比较简短的自动连结形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接，链接的文字就和链接位置一样，例如： &lt;http://example.com/&gt; Markdown 会转为： &lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt; 邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如： &lt;address@example.com&gt; Markdown 会转成： &lt;a href=&quot;&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65; &amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111; &amp;#109;&quot;&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61; &amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt; 在浏览器里面，这段字符串（其实是 &lt;a href=&quot;mailto:address@example.com&quot;&gt;address@example.com&lt;/a&gt;）会变成一个可以点击的「address@example.com」链接。 （这种作法虽然可以糊弄不少的机器人，但并无法全部挡下来，不过这样也比什么都不做好些。无论如何，公开你的信箱终究会引来广告信件的。） 反斜杠 Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 &lt;em&gt; 标签），你可以在星号的前面加上反斜杠： \*literal asterisks\* Markdown 支持在下面这些符号前面加上反斜杠来帮助插入普通的符号： \ 反斜杠 ` 反引号 * 星号 _ 底线 {} 大括号 [] 方括号 () 括号 # 井字号 + 加号 - 减号 . 英文句点 ! 惊叹号 公式 行内公式（$ 包裹），例如： 质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。 整行公式（$$包裹），例如： $$\sum_{i=1}^n a_i=0$$ $$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$ $$\sum^{j-1}_{k=0}{\widehat{\gamma}_{kj} z_k}$$ 访问MathJax参考更多使用方法。 流程图 (```)flow st=&gt;start: Start|past:&gt;http://www.google.com[blank] e=&gt;end: End:&gt;http://www.google.com op1=&gt;operation: My Operation|past op2=&gt;operation: Stuff|current sub1=&gt;subroutine: My Subroutine|invalid cond=&gt;condition: Yes or No?|approved:&gt;http://www.google.com c2=&gt;condition: Good idea|rejected io=&gt;inputoutput: catch something...|request st-&gt;op1(right)-&gt;cond cond(yes, right)-&gt;c2 cond(no)-&gt;sub1(left)-&gt;op1 c2(yes)-&gt;io-&gt;e c2(no)-&gt;op2-&gt;e (```) 显示如下： 流程图分为两部分定义参数和连接参数 tag=&gt;type: content:&gt;url // 形参格式 st=&gt;start: 开始:&gt;http://www.baidu.com[blank] //实参格式 注：st=&gt;start: 开始的:后保持空格 形参 实参 含义 tag st 标签（可以自定义） =&gt; =&gt; 赋值 type start 类型 (6种类型) content 开始 描述内容 (可以自定义) :&gt;url http://www.baidu.com[blank] 链接与跳转方式 兼容性很差 单元类型： 6种类型 含义 start 启动 end 结束 operation 程序 subroutine 子程序 condition 条件 inputoutput 输出 连接示例： st-&gt;c1(yes,right)-&gt;c2(yes,right)-&gt;c3(yes,right)-&gt;io-&gt;e 开始-&gt;判断条件1为no-&gt;判断条件2为no-&gt;判断条件3为no-&gt;输出-&gt;结束 形参 实参 含义 -&gt; -&gt; 连接 condition c1 条件 (布尔值,方向) (yes,right) 如果满足向右连接，4种方向：right ，left，up ，down 默认为：down 注：operation (程序); subroutine (子程序) ;condition (条件)，都可以在括号里加入连接方向 operation(right) subroutine(left) condition(yes,right) // 只有条件 才能加布尔值 了解更多使用法，访问流程图语法参考 表格 基本语法： 第一行为表头，第二行分隔表头和主体部分，第三行开始每一行为一个表格行。 列于列之间用管道符|隔开。原生方式的表格每一行的两边也要有管道符。 第二行还可以为不同的列指定对齐方向。默认为左对齐，在-右边加上:就右对齐。 简单方式： 学号|姓名|分数 -|-|- 小明|男|75 小红|女|79 小陆|男|92 原生方式： |学号|姓名|分数| |-|-|-| |小明|男|75| |小红|女|79| |小陆|男|92| 对齐方式： 第一列 | 第二列 | 第三列 -------: | :------: | :------- 右对齐 | 居中 | 左对齐 参考内容 1、https://github.com/othree/markdown-syntax-zhtw2、https://blog.csdn.net/witnessai1/article/details/52551362 *st=>start: Start|past:>http://www.google.com[blank] e=>end: End:>http://www.google.com op1=>operation: My Operation|past op2=>operation: Stuff|current sub1=>subroutine: My Subroutine|invalid cond=>condition: Yes or No?|approved:>http://www.google.com c2=>condition: Good idea|rejected io=>inputoutput: catch something...|request st->op1(right)->cond cond(yes, right)->c2 cond(no)->sub1(left)->op1 c2(yes)->io->e c2(no)->op2->e{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12} var code = document.getElementById("flowchart-0-code").value; var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value)); var diagram = flowchart.parse(code); diagram.drawSVG("flowchart-0", options);]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Markown</tag>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo搭建个性化blog]]></title>
    <url>%2F2018%2F04%2F30%2Fhexo-config%2F</url>
    <content type="text"><![CDATA[Hexo是高效的静态站点生成框架，基于 Node.js。 通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 标签插件 来快速的插入特定形式的内容。在这篇文章中，假定你已经成功安装了 Hexo，并使用 Hexo 提供的命令创建了一个站点。 初级搭建 安装 在安装前，您必须检查电脑中是否已安装下列应用程序： Node.js Git 1、node.js安装 ubuntu: for Node.js 10: curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash - sudo apt-get install -y nodejs for Node.js 10: curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash - sudo apt-get install -y nodejs mac: brew install node 2、git安装 ubuntu: sudo apt-get install git-core mac: brew install git 3、hexo安装 使用 npm 即可完成 Hexo 的安装 npm install -g hexo-cli 搭建博客 1、初始化 hexo init + 需要初始化的目录 2、安装依赖 进入初始化后的目录，并安装依赖 npm install 3、生成页面文件 hexo generate # 简写 hexo g 4、启动本地服务 hexo server # 简写 hexo s 调试加参数：--debug 5、 测试 浏览器输入： http://localhost:4000 6、安装主题 安装Next主题，访问更多主题 git clone https://github.com/iissnan/hexo-theme-next themes/next 根目录下_config.yml，修改theme值 theme: next # 刚刚安装的主题名称 常用命令 Hexo 安装升级 npm install hexo -g #安装 npm update hexo -g #升级 hexo init #初始化 常用简写 hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章 hexo p == hexo publish hexo g == hexo generate#生成 hexo s == hexo server #启动服务预览 hexo d == hexo deploy#部署 启动本地服务 hexo server #Hexo #会监视文件变动并自动更新，您无须重启服务器。 hexo server -s #静态模式 hexo server -p 5000 #更改端口 hexo server -i 192.168.1.1 #自定义 IP 监视文件变动 hexo generate #使用 Hexo 生成静态文件快速而且简单 hexo generate --watch #监视文件变动 hexo clean #清除缓存 网页正常情况下可以忽略此条命令 部署 #两个命令的作用是相同的 hexo generate --deploy hexo deploy --generate hexo deploy -g hexo server -g 草稿 # 新建草稿 hexo new draft &lt;title&gt; # 发布草稿为post hexo publish draft &lt;title&gt; 模板 hexo new &quot;postName&quot; #新建文章 hexo new page &quot;pageName&quot; #新建页面 hexo generate #生成静态页面至public目录 hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server） hexo deploy #将.deploy目录部署到GitHub hexo new [layout] &lt;title&gt; hexo new photo &quot;My Gallery&quot; hexo new &quot;Hello World&quot; --lang tw 写作时间 变量 描述 :title 标题 :year 建立的年份（4 位数） :month 建立的月份（2 位数） :i_month 建立的月份（去掉开头的零） :day 建立的日期（2 位数） :i_day 建立的日期（去掉开头的零） 个性化设置 实现fork me on github 点击这里或Here，挑选喜欢的样式，复制其中的代码，例如： &lt;a href=&quot;https://github.com/you&quot;&gt; &lt;img style=&quot;position: absolute; top: 0; left: 0; border: 0;&quot; src=&quot;https://s3.amazonaws.com/github/ribbons/forkme_left_red_aa0000.png&quot; alt=&quot;Fork me on GitHub&quot;&gt; &lt;/a&gt; 然后粘贴刚才复制的代码到themes/next/layout/_layout.swig文件中(放在&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;的下面)，并把href改为你的github地址。 字体大小 打开\themes\next\source\css\ _variables\base.styl文件，修改font-size-base，如下所示： font-size-base = 16px 添加RSS 根目录下安装插件： npm install --save hexo-generator-feed 配置主题配置文件下的rss: rss: /atom.xml #或者为空 重新生成静态文件，将在public下生成atom.xml hexo g 添加动态线条背景 1、修改_layout.swig 打开 next/layout/_layout.swig,在 &lt; /body&gt;之前添加代码(注意不要放在&lt; /head&gt;的后面) 1234&#123;% if theme.canvas_nest %&#125;&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt;&#123;% endif %&#125; 2、修改配置文件打开 /next/_config.yml,在里面添加如下代码：(可以放在最后面) # -------------------------------------------------------------- # background settings # -------------------------------------------------------------- # add canvas-nest effect # see detail from https://github.com/hustcc/canvas-nest.js canvas_nest: true 3、重新生成文件 hexo clean hexo g hexo s 4、配置线条属性 替换第一步中的代码： 1234&#123;% if theme.canvas_nest %&#125;&lt;script type=&quot;text/javascript&quot;color=&quot;0,0,255&quot; opacity=&apos;0.7&apos; zIndex=&quot;-2&quot; count=&quot;99&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt;&#123;% endif %&#125; 配置项说明 color ：线条颜色, 默认: ‘0,0,0’；三个数字分别为(R,G,B) opacity: 线条透明度（0~1）, 默认: 0.5 count: 线条的总数量, 默认: 150 zIndex: 背景的z-index属性，css属性用于控制所在层的位置, 默认: -1 点击出桃心 新建love.js文件，放入路径/themes/next/source/js/src 1!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &apos;&apos;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document); 打开\themes\next\layout\_layout.swig文件，添加如下代码： &lt;!-- 页面点击小红心 --&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt; 修改文章内链接文本样式 修改文件 themes\next\source\css\_common\components\post\post.styl，在末尾添加如下css样式: // 文章内链接文本样式 .post-body p a{ color: #0593d3; border-bottom: none; border-bottom: 1px solid #0593d3; &amp;:hover { color: #fc6423; border-bottom: none; border-bottom: 1px solid #fc6423; } } 其中选择.post-body是为了不影响标题，选择 p是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义。 修改标签显示 修改模板/themes/next/layout/_macro/post.swig，搜索 rel=&quot;tag&quot;&gt;#，将 #换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 添加“本文结束”标记 在路径\themes\next\layout\_macro中新建 passage-end-tag.swig 文件,并添加以下内容： 123456&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt; -------------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 打开\themes\next\layout\_macro\post.swig文件，在post-body 之后， post-footer 之前添加div: 12345&lt;div&gt;&#123;% if not is_index %&#125; &#123;% include &apos;passage-end-tag.swig&apos; %&#125;&#123;% endif %&#125;&lt;/div&gt; 打开主题配置文件_config.yml,在末尾添加： # 文章末尾添加“本文结束”标记 passage_end_tag: enabled: true 头像旋转 打开\themes\next\source\css\_common\components\sidebar\sidebar-author.styl，在里面添加如下代码： .site-author-image { display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: $site-author-image-border-width solid $site-author-image-border-color; /* 头像圆形 */ border-radius: 80px; -webkit-border-radius: 80px; -moz-border-radius: 80px; box-shadow: inset 0 -1px 0 #333sf; /* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/ /* 鼠标经过头像旋转360度 */ -webkit-transition: -webkit-transform 1.0s ease-out; -moz-transition: -moz-transform 1.0s ease-out; transition: transform 1.0s ease-out; } img:hover { /* 鼠标经过停止头像旋转 -webkit-animation-play-state:paused; animation-play-state:paused;*/ /* 鼠标经过头像旋转360度 */ -webkit-transform: rotateZ(360deg); -moz-transform: rotateZ(360deg); transform: rotateZ(360deg); } /* Z 轴旋转动画 */ @-webkit-keyframes play { 0% { -webkit-transform: rotateZ(0deg); } 100% { -webkit-transform: rotateZ(-360deg); } } @-moz-keyframes play { 0% { -moz-transform: rotateZ(0deg); } 100% { -moz-transform: rotateZ(-360deg); } } @keyframes play { 0% { transform: rotateZ(0deg); } 100% { transform: rotateZ(-360deg); } } 博文压缩 在根目录下执行命令： npm install gulp -g npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save 根目录下新建gulpfile.js，加入代码: var gulp = require(&apos;gulp&apos;); var minifycss = require(&apos;gulp-minify-css&apos;); var uglify = require(&apos;gulp-uglify&apos;); var htmlmin = require(&apos;gulp-htmlmin&apos;); var htmlclean = require(&apos;gulp-htmlclean&apos;); // 压缩 public 目录 css gulp.task(&apos;minify-css&apos;, function() { return gulp.src(&apos;./public/**/*.css&apos;) .pipe(minifycss()) .pipe(gulp.dest(&apos;./public&apos;)); }); // 压缩 public 目录 html gulp.task(&apos;minify-html&apos;, function() { return gulp.src(&apos;./public/**/*.html&apos;) .pipe(htmlclean()) .pipe(htmlmin({ removeComments: true, minifyJS: true, minifyCSS: true, minifyURLs: true, })) .pipe(gulp.dest(&apos;./public&apos;)) }); // 压缩 public/js 目录 js gulp.task(&apos;minify-js&apos;, function() { return gulp.src(&apos;./public/**/*.js&apos;) .pipe(uglify()) .pipe(gulp.dest(&apos;./public&apos;)); }); // 执行 gulp 命令时执行的任务 gulp.task(&apos;default&apos;, [ &apos;minify-html&apos;,&apos;minify-css&apos;,&apos;minify-js&apos; ]); 生成博文是执行 hexo g &amp;&amp; gulp 就会根据 gulpfile.js 中的配置，对 public 目录中的静态资源文件进行压缩。 代码块样式 打开\themes\next\source\css\_custom\custom.styl,加入代码： // Custom styles. code { color: #ff7600; background: #fbf7f8; margin: 2px; } // 大代码块的自定义样式 .highlight, pre { margin: 5px 0; padding: 5px; border-radius: 3px; } .highlight, code, pre { border: 1px solid #d6d6d6; } 社交小图标 打开主题配置文件_config.yml，搜索social_icons:,在图标库找自己喜欢的小图标，并将名字复制在对应位置 主页添加阴影效果 打开\themes\next\source\css\_custom\custom.styl,向里面加入： // 主页文章添加阴影效果 .post { margin-top: 60px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); } 添加访问量 打开\themes\next\layout\_partials\footer.swig文件,在copyright代码块前添加： &lt;script async src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt; 打开\themes\next\layout\_macro\post.swig文件，在需要显示的地方添加： &lt;div class=&quot;powered-by&quot;&gt; &lt;i class=&quot;fa fa-user-md&quot;&gt;&lt;/i&gt;&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt; 本站访客数:&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt; &lt;/span&gt; &lt;/div&gt; 两中不同计算方式的统计代码： pv的方式，单个用户连续点击n篇文章，记录n次访问量 123&lt;span id=&quot;busuanzi_container_site_pv&quot;&gt; 本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次&lt;/span&gt; uv的方式，单个用户连续点击n篇文章，只记录1次访客数 123&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;本站总访问量&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;次&lt;/span&gt; 添加之后再执行hexo d -g，然后再刷新页面。 添加热度 打开/themes/next/layout/_macro/post.swig，搜索leancloud-visitors-count，修改对应热度显示文字。 打开/themes/next/languages/zh-Hans.yml,将visitors值改为“热度”。 字数统计 在根目录下，安装计数插件： npm install hexo-wordcount --save 若要在网站底部显示，可以在文件/themes/next/layout/_partials/footer.swig尾部加入代码： &lt;div class=&quot;theme-info&quot;&gt; &lt;div class=&quot;powered-by&quot;&gt;&lt;/div&gt; &lt;span class=&quot;post-count&quot;&gt;博客全站共{{ totalcount(site) }}字&lt;/span&gt; &lt;/div&gt; 添加READEME.md 每个项目下一般都有一个 README.md 文件，但是使用 hexo 部署到仓库后，项目下是没有 README.md 文件的。 在 Hexo 目录下的 source 根目录下添加一个 README.md 文件，修改站点配置文件 _config.yml，将 skip_render 参数的值设置如下： skip_render: README.md 使用 hexo d 命令部署博客的时候就不会在渲染 README.md 文件。 网站图标 在EasyIcon中找一张（32*32）的ico图标,或者去别的网站下载或者制作，并将图标名称改为favicon.ico`，然后把图标放在/themes/next/source/images`里，并且修改主题配置文件： # Put your favicon.ico into `hexo-site/source/` directory. favicon: /favicon.ico 统计功能 在根目录下安装 hexo-wordcount,运行： npm install hexo-wordcount --save 然后在主题的配置文件中，配置如下： # Post wordcount display settings # Dependencies: https://github.com/willin/hexo-wordcount post_wordcount: item_text: true wordcount: true min2read: true 进度条 打开/themes/next/layout/_partials/head.swig文件，添加代码: &lt;script src=&quot;//cdn.bootcss.com/pace/1.0.2/pace.min.js&quot;&gt;&lt;/script&gt; &lt;link href=&quot;//cdn.bootcss.com/pace/1.0.2/themes/pink/pace-theme-flash.css&quot; rel=&quot;stylesheet&quot;&gt; 默认的是粉色的，要改变颜色可以在/themes/next/layout/_partials/head.swig文件中添加如下代码（接在刚才link的后面）: &lt;style&gt; .pace .pace-progress { background: #1E92FB; /*进度条颜色*/ height: 3px; } .pace .pace-progress-inner { box-shadow: 0 0 10px #1E92FB, 0 0 5px #1E92FB; /*阴影颜色*/ } .pace .pace-activity { border-top-color: #1E92FB; /*上边框颜色*/ border-left-color: #1E92FB; /*左边框颜色*/ } &lt;/style&gt; 升级最新版的next主题，只需修改主题配置文件_config.yml将pace: false改为pace: true即可，还可以换不同样式的加载条。 pace: true pace_theme: pace-theme-minimal 版权信息 在目录 next/layout/_macro/下添加 my-copyright.swig： 123456789101112131415161718192021222324252627282930&#123;% if page.copyright %&#125;&lt;div class=&quot;my_post_copyright&quot;&gt;&lt;script src=&quot;//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js&quot;&gt;&lt;/script&gt;&lt;!-- JS库 sweetalert 可修改路径 --&gt;&lt;script src=&quot;https://cdn.bootcss.com/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://unpkg.com/sweetalert/dist/sweetalert.min.js&quot;&gt;&lt;/script&gt;&lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot;&gt;&#123;&#123; page.title &#125;&#125;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&lt;a href=&quot;/&quot; title=&quot;访问 &#123;&#123; theme.author &#125;&#125; 的个人博客&quot;&gt;&#123;&#123; theme.author &#125;&#125;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;发布时间:&lt;/span&gt;&#123;&#123; page.date.format(&quot;YYYY年MM月DD日 - HH:MM&quot;) &#125;&#125;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后更新:&lt;/span&gt;&#123;&#123; page.updated.format(&quot;YYYY年MM月DD日 - HH:MM&quot;) &#125;&#125;&lt;/p&gt;&lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot; title=&quot;&#123;&#123; page.title &#125;&#125;&quot;&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt; &lt;span class=&quot;copy-path&quot; title=&quot;点击复制文章链接&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; data-clipboard-text=&quot;&#123;&#123; page.permalink &#125;&#125;&quot; aria-label=&quot;复制成功！&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;许可协议:&lt;/span&gt;&lt;i class=&quot;fa fa-creative-commons&quot;&gt;&lt;/i&gt; &lt;a rel=&quot;license&quot; href=&quot;https://creativecommons.org/licenses/by-nc-nd/4.0/&quot; target=&quot;_blank&quot; title=&quot;Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)&quot;&gt;署名-非商业性使用-禁止演绎 4.0 国际&lt;/a&gt; 转载请保留原文链接及作者。&lt;/p&gt;&lt;/div&gt;&lt;script&gt; var clipboard = new Clipboard(&apos;.fa-clipboard&apos;); $(&quot;.fa-clipboard&quot;).click(function()&#123; clipboard.on(&apos;success&apos;, function()&#123; swal(&#123; title: &quot;&quot;, text: &apos;复制成功&apos;, icon: &quot;success&quot;, showConfirmButton: true &#125;); &#125;); &#125;);&lt;/script&gt;&#123;% endif %&#125; 在目录next/source/css/_common/components/post/下添加my-post-copyright.styl： .my_post_copyright { width: 85%; max-width: 45em; margin: 2.8em auto 0; padding: 0.5em 1.0em; border: 1px solid #d3d3d3; font-size: 0.93rem; line-height: 1.6em; word-break: break-all; background: rgba(255,255,255,0.4); } .my_post_copyright p{margin:0;} .my_post_copyright span { display: inline-block; width: 5.2em; color: #b5b5b5; font-weight: bold; } .my_post_copyright .raw { margin-left: 1em; width: 5em; } .my_post_copyright a { color: #808080; border-bottom:0; } .my_post_copyright a:hover { color: #a3d2a3; text-decoration: underline; } .my_post_copyright:hover .fa-clipboard { color: #000; } .my_post_copyright .post-url:hover { font-weight: normal; } .my_post_copyright .copy-path { margin-left: 1em; width: 1em; +mobile(){display:none;} } .my_post_copyright .copy-path:hover { color: #808080; cursor: pointer; } 修改next/layout/_macro/post.swig，在代码 &lt;div&gt; {% if not is_index %} {% include 'wechat-subscriber.swig' %} {% endif %} &lt;/div&gt; 之前添加增加如下代码： &lt;div&gt; {% if not is_index %} {% include 'my-copyright.swig' %} {% endif %} &lt;/div&gt; 修改next/source/css/_common/components/post/post.styl文件，在最后一行增加代码： @import &quot;my-post-copyright&quot; 保存重新生成。如果要在该博文下面增加版权信息的显示，需要在 Markdown 中增加copyright: true的设置，类似： --- title: 前端小项目：使用canvas绘画哆啦A梦 date: 2017-05-22 22:53:53 tags: canvas categories: 前端 copyright: true --- 如果你觉得每次都要输入copyright: true很麻烦的话,那么在/scaffolds/post.md文件中添加： --- title: {{ title }} date: {{ date }} tags: categories: copyright: true --- 跟帖功能 更新next主题，因为最新版本的主题已经支持这种评论。直接在主题配置文件_config.yml 文件中添加如下配置:(来必力中的data-uid) # Support for LiveRe comments system. # You can get your uid from https://livere.com/insight/myCode (General web site) livere_uid: your uid 在 layout/_scripts/third-party/comments/ 目录中添加 livere.swig，文件内容如下： 1234567891011121314&#123;% if not (theme.duoshuo and theme.duoshuo.shortname) and not theme.duoshuo_shortname and not theme.disqus_shortname and not theme.hypercomments_id and not theme.gentie_productKey %&#125; &#123;% if theme.livere_uid %&#125; &lt;script type=&quot;text/javascript&quot;&gt; (function(d, s) &#123; var j, e = d.getElementsByTagName(s)[0]; if (typeof LivereTower === &apos;function&apos;) &#123; return; &#125; j = d.createElement(s); j.src = &apos;https://cdn-city.livere.com/js/embed.dist.js&apos;; j.async = true; e.parentNode.insertBefore(j, e); &#125;)(document, &apos;script&apos;); &lt;/script&gt; &#123;% endif %&#125;&#123;% endif %&#125; 然后在 layout/_scripts/third-party/comments.swig文件中追加： {% include './comments/livere.swig' %} 最后，在 layout/_partials/comments.swig 文件中条件最后追加 LiveRe 插件是否引用的判断逻辑： 123&#123;% elseif theme.livere_uid %&#125; &lt;div id=&quot;lv-container&quot; data-id=&quot;city&quot; data-uid=&quot;&#123;&#123; theme.livere_uid &#125;&#125;&quot;&gt;&lt;/div&gt;&#123;% endif %&#125; 文章加密 打开themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig文件,在以下位置插入代码： &lt;script&gt; (function(){ if(&apos;{{ page.password }}&apos;){ if (prompt(&apos;请输入文章密码&apos;) !== &apos;{{ page.password }}&apos;){ alert(&apos;密码错误！&apos;); history.back(); } } })(); &lt;/script&gt; 在文章编辑的head中添加： password: password 文章分享 在主题配置文件中修改配置： jiathis: true 也可以通过修改themes/next/layout/_partials/share/jiathis.swig进行自定义。 博文置顶 修改 hero-generator-index 插件，把文件：node_modules/hexo-generator-index/lib/generator.js 内的代码替换为： &apos;use strict&apos;; var pagination = require(&apos;hexo-pagination&apos;); module.exports = function(locals){ var config = this.config; var posts = locals.posts; posts.data = posts.data.sort(function(a, b) { if(a.top &amp;&amp; b.top) { // 两篇文章top都有定义 if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排 else return b.top - a.top; // 否则按照top值降序排 } else if(a.top &amp;&amp; !b.top) { // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233） return -1; } else if(!a.top &amp;&amp; b.top) { return 1; } else return b.date - a.date; // 都没定义按照文章日期降序排 }); var paginationDir = config.pagination_dir || &apos;page&apos;; return pagination(&apos;&apos;, posts, { perPage: config.index_generator.per_page, layout: [&apos;index&apos;, &apos;archive&apos;], format: paginationDir + &apos;/%d/&apos;, data: { __index: true } }); }; 在文章中添加top值，数值越大文章越靠前。 top: 100 鼠标样式 打开themes/next/source/css/_custom/custom.styl,在里面写下如下代码 // 鼠标样式 * { cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword2.ico&quot;),auto!important } :active { cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword1.ico&quot;),auto!important } 其中 url 里面必须是 ico 图片。 添加宠物 在根目录下，安装插件: npm install -save hexo-helper-live2d 然后打开Hexo/blog/themes/next/layout的_layout.swig,将下面代码放到&lt;/body&gt;之前： {{ live2d() }} 然后在在 hexo 的 _config.yml中添加参数： live2d: model: wanko bottom: -30 mobileShow: false #手机上不显示 重新生成文件： hexo clean hexo g hexo d 其它参数： model 模型名称 默认值: z16 Gantzert_Felixander Epsilon2.1 haru miku ni-j nico nito nipsilon nietzsche shizuku tsumiki wanko z16 hibiki koharu haruto Unitychan tororo hijik width 宽度 默认值: 150 height 高度 默认值：300 className &lt;canvas&gt;元素的类名 默认值： live2d id &lt;canvas&gt; 元素的id 默认值： live2dcanvas bottom &lt;canvas&gt; 元素的底部偏移 默认值： -20 如果嫌模型位置不正确 可以调整这个参数 若出现部署错误，首先删除hexo 下面的.deploy_git文件夹，然后运行 git config --global core.autocrlf false DaoVoice在线联系 首先在 daovoice 注册账号,注册完成后会得到一个 app_id ,调用JavaScript，获取app_id。 daovoice(&apos;init&apos;,{ app_id: &apos;&apos; }); daovoice(&apos;update&apos;); 打开/themes/next/layout/_partials/head.swig,写下如下代码： 123456789&#123;% if theme.daovoice %&#125; &lt;script&gt; (function(i,s,o,g,r,a,m)&#123;i[&quot;DaoVoiceObject&quot;]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=&quot;utf-8&quot;;m.parentNode.insertBefore(a,m)&#125;)(window,document,&quot;script&quot;,(&apos;https:&apos; == document.location.protocol ? &apos;https:&apos; : &apos;http:&apos;) + &quot;//widget.daovoice.io/widget/0f81ff2f.js&quot;,&quot;daovoice&quot;) daovoice(&apos;init&apos;, &#123; app_id: &quot;&#123;&#123;theme.daovoice_app_id&#125;&#125;&quot; &#125;); daovoice(&apos;update&apos;); &lt;/script&gt;&#123;% endif %&#125; 打开主题配置文件，在最后写下如下代码： # Online contact daovoice: true daovoice_app_id: 这里填你的刚才获得的 app_id 重新 hexo g ，hexo s，可以在DaoVoice 控制台上的聊天设置里设置聊天窗口样式。 点击爆炸效果 首先在themes/next/source/js/src里面建一个叫fireworks.js的文件，代码如下： 12345678&quot;use strict&quot;;function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;&quot;use strict&quot;;function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;;打开themes/next/layout/_layout.swig,在&lt;/body&gt;上面写下如下代码：&#123;% if theme.fireworks %&#125; &lt;canvas class=&quot;fireworks&quot; style=&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;/canvas&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/fireworks.js&quot;&gt;&lt;/script&gt;&#123;% endif %&#125; 打开主题配置文件，加入： # Fireworks fireworks: true 常见问题 localsearch失效 hexo搜索失效，‘network’选项卡中可以看到正常请求search.xml文件且返回了200。错误如下： error on line 6 at column 35: Input is not proper UTF-8, indicate encoding ! Bytes: 0x08 0x79 0x6F 0x6C 主要原因是在博文中有非法字符，解决办法：在博文中搜索\x08,替换为无 参考内容 1、https://www.jianshu.com/p/e8e5addbbcfd2、https://www.jianshu.com/p/f054333ac9e63、https://www.jianshu.com/p/a2fe56d11c4f]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
</search>
